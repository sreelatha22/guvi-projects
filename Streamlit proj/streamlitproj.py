# -*- coding: utf-8 -*-
"""Streamlitproj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bcxNvOssES7rpXO2TZGgyd1untEIsKqM
"""

import streamlit as st
import requests
import http.client
import json
import pandas as pd

headers = {
    'x-rapidapi-key': "71a1e0cbf0msh8073bbb1608851ap156910jsn34e260cc154e",
    'x-rapidapi-host': "cricbuzz-cricket.p.rapidapi.com"
}

url = "https://cricbuzz-cricket.p.rapidapi.com/mcenter/v1/upcoming"

response = requests.get(url=url, headers=headers)
data = response.json()

st.title("Cricbuzz Match Dashboard")
st.header(
    "Select a match !!!"
)
st.subheader("Cricket Dashboard")
st.write("Avai")
sb = st.sidebar.selectbox('Choose a page',['Live Scores','Player Stats','SQL Analytics','CRUD operations'],index=1)
st.write(sb)

type_matches = data.get('matchesList')
series_matches = type_matches[0]
series_wrapper = series_matches['matchesList'][0]
matches_list = series_wrapper['matches']
first_match = matches_list[0]

#details of 1st international match
#match_id = first_match['matchId']
#series_name = first_match['seriesName']
#match_desc = first_match['seriesCategory']
#start_date = first_match['startDate']

#Adding each match details in a list
matches = []

for type_match in data.get('matchesList',[]):
    for series_match in type_match.get('matchesList', []):
        series_id = series_match.get('seriesId')
        series_name = series_match.get('seriesName')
        for match in series_match.get("matches"):
            # st.write(match)
            match_id = match.get('matchId')
            match_desc = match.get('matchDesc')
            match_format = match.get('seriesName')
            start_date = match.get('startDate')
            status = match.get('state')
            team1 = match.get('team1Name')
            team2 = match.get('team2Name')
            venue = match.get('ground')

            matches.append({
                'series_id': series_id,
                'series_name': series_name,
                'match_id':match_id,
                'match_desc': match_desc,
                'match_format': match_format,
                'start_date': start_date,
                'status': status,
                'team1': team1,
                'team2': team2,
                'venue': venue
            })


df = pd.DataFrame(matches)
df
#st.write(df)

#Handle real-time match data, player stats, and series information
#streamlit - dropdown code

#Live matches
if sb == 'Live Scores':
  live_url = "https://cricbuzz-cricket.p.rapidapi.com//matches/v1/live"
  live_response = requests.get(url=live_url, headers=headers)
  live_data = live_response.json()
  live_type_matches = live_data.get('typeMatches')
  live_series_matches = live_type_matches[0]
  live_series_wrapper = live_series_matches['seriesMatches']
  #Adding each match details in a list
  live_matches = []

  for type_match in live_data.get('typeMatches',[]):
      for series_match in type_match.get('seriesMatches', []):
          series_wrapper = series_match.get('seriesAdWrapper', {})
          series_id = series_wrapper.get('seriesId')
          series_name = series_wrapper.get('seriesName')
          for match_obj in series_wrapper.get('matches', []):
              match1 = match_obj.get('matchInfo')
              match_id = match1.get('matchId')
              match_desc = match1.get('matchDesc')
              match_format = match1.get('seriesName')
              start_date = match1.get('startDate')
              status = match1.get('state')
              team1 = match1['team1']['teamName']
              team2 = match1['team2']['teamName']
              venue = match1['venueInfo']['ground']

              live_matches.append({
              'series_id': series_id,
              'series_name': series_name,
              'match_id':match_id,
              'match_desc': match_desc,
              'match_format': match_format,
              'start_date': start_date,
              'status': status,
              'team1': team1,
              'team2': team2,
              'venue': venue
              })

  live_df = pd.DataFrame(live_matches)
  live_df
  #st.write(live_df)

teams_url = "https://cricbuzz-cricket.p.rapidapi.com/teams/v1/international"

teams_response = requests.get(url=teams_url, headers=headers)


teams_data = teams_response.json()
#teams_data

#Top Player Stats Page

if sb == 'Player Stats':
  top_stats_url = "https://cricbuzz-cricket.p.rapidapi.com/stats/v1/topstats"
  top_stats_response = requests.get(url=top_stats_url, headers=headers)
  top_stats_data = top_stats_response.json()
  top_stats_list = top_stats_data.get('statsTypesList')
  top_stats_list
  #type_top_stats = top_stats_list[0] #Batting
  #type_top_stats = top_stats_list[1] #Bowling
  #type_top_stats

  #Adding each top stats record in dataframe
  top_stats_df = []

  for list1 in top_stats_data.get('statsTypesList',[]):
    for person in list1.get('types',{}):
      value = person.get('value')
      header = person.get('header')
      category = person.get('category')

      top_stats_df.append({
              'value': value,
              'header': header,
              'category':category,
              })

  top_stats_df = pd.DataFrame(top_stats_df)
  top_stats_df
  st.write(live_df)
  #match_list = st.selectbox(df[match_list],index=1)

#SQL Queries & Analytics Page
#Integrates 25+ advanced SQL queries on the player and match database
#Shows tabular outputs directly in Streamlit for user interaction
#use conn.commit only for INSERT, UPDATE, DELETE.

import psycopg2
import requests

# Use your Railway connection details
conn = psycopg2.connect(
    dbname="railway",
    user="postgres",
    password="NXcAtXmxVMnLKKObihpprGsqEoDQCaCX",
    host="crossover.proxy.rlwy.net",
    port="25216"
)

cursor = conn.cursor()

#for exporting all api data to sql
from sqlalchemy import create_engine
engine = create_engine('postgresql://postgres:NXcAtXmxVMnLKKObihpprGsqEoDQCaCX@crossover.proxy.rlwy.net:25216/railway')

#Create table if it doesn’t exist
cursor.execute('''
    CREATE TABLE IF NOT EXISTS matches (
        id SERIAL PRIMARY KEY,
        match_id VARCHAR(50),
        team1 VARCHAR(50),
        team2 VARCHAR(50),
        status VARCHAR(100)
    )
''')

conn.commit()
print("✅ Connected & table ready")

#Indian players
players_url = "https://cricbuzz-cricket.p.rapidapi.com/teams/v1/2/players"

players_response = requests.get(url=players_url, headers=headers)

players_data = players_response.json()
#players_data

batting_list = []

for player1 in players_data.get('player',[]):
  id = player1.get('id')
  name = player1.get('name')
  imageID = player1.get('imageId')
  battingStyle = player1.get('battingStyle')
  bowlingStyle = player1.get('bowlingStyle')

  batting_list.append({
    'id': id,
    'name': name,
    'imageID': imageID,
    'battingStyle': battingStyle,
    'bowlingStyle': bowlingStyle
  })

batting_df = pd.DataFrame(batting_list)

batting_df.to_sql('indian_players', con=engine, if_exists='replace', index=False)

try:
    cursor.execute('''
        SELECT *
        FROM indian_players
    ''')
    rows = cursor.fetchall()
    st.write(rows)
except Exception as e:
    print("Error:", e)

#query2 - Show all cricket matches that were played in the last Few days.
#Include the match description, both team names, venue name with city, and the match date. Sort by most recent matches first.

recent_url = "https://cricbuzz-cricket.p.rapidapi.com/matches/v1/recent"

recent_response = requests.get(url=recent_url, headers=headers)

recent_data = recent_response.json()

recent_matches = []

for type_match in recent_data.get('typeMatches',[]):
    for series_match in type_match.get('seriesMatches', []):
        series_wrapper = series_match.get('seriesAdWrapper', {})
        series_id = series_wrapper.get('seriesId')
        series_name = series_wrapper.get('seriesName')
        for match_obj in series_wrapper.get('matches', []):
            match1 = match_obj.get('matchInfo')
            match_id = match1.get('matchId')
            match_desc = match1.get('matchDesc')
            match_format = match1.get('seriesName')
            start_date = match1.get('startDate')
            status = match1.get('state')
            team1 = match1['team1']['teamName']
            team2 = match1['team2']['teamName']
            venue = match1['venueInfo']['ground']
            city = match1['venueInfo']['city']


            recent_matches.append({
            'series_id': series_id,
            'series_name': series_name,
            'match_id':match_id,
            'match_desc': match_desc,
            'match_format': match_format,
            'date': start_date,
            'status': status,
            'team1': team1,
            'team2': team2,
            'venue': venue,
            'city': city
            })

recent_df = pd.DataFrame(recent_matches)
st.write(recent_df)

recent_df.to_sql('recent_matches', con=engine, if_exists='replace', index=False)

#Include the match description, both team names, venue name with city, and the match date. Sort by most recent matches first.
try:
    cursor.execute('''
        SELECT match_desc, team1, team2, venue, city, date
        FROM recent_matches
        ORDER BY date DESC
    ''')
    rows = cursor.fetchall()
    st.write(rows)
    for row in rows:
        print(row)
except Exception as e:
  print("Error:", e)
  conn.rollback()  # reset the transaction so further queries work

#Query 3 - List the top 10 highest run scorers in ODI cricket.
#Show player name, total runs scored, batting average, and number of centuries. Display the highest run scorer first.

#score_url = "https://cricbuzz-cricket.p.rapidapi.com/mcenter/v1/40381/scard"


score_url = "https://cricbuzz-cricket.p.rapidapi.com/mcenter/v1/41881"

score_response = requests.get(url=score_url, headers=headers)

score_data = score_response.json()

#Include the match description, both team names, venue name with city, and the match date. Sort by most recent matches first.
try:
    cursor.execute('''
        SELECT match_desc, team1, team2, venue, city, date
        FROM recent_matches
        ORDER BY date DESC
    ''')
    rows = cursor.fetchall()
    for row in rows:
        print(row)
    st.write(rows)
except Exception as e:
  print("Error:", e)
  conn.rollback()  # reset the transaction so further queries work

#crud operations

if sb == 'CRUD operations':
  for match in matches:
      match_id = match.get("id")
      team1 = match.get("team1", {}).get("name")
      team2 = match.get("team2", {}).get("name")
      status = match.get("status")

      cursor.execute(
          "INSERT INTO matches (match_id, team1, team2, status) VALUES (%s, %s, %s, %s)",
          (match_id, team1, team2, status)
      )

  conn.commit()
  print("✅ Data inserted into database")